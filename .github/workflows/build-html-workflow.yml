name: Build and Deploy
on:
  push:
    branches:
      - master
      - site
jobs:
  buildhtml:
    runs-on: windows-2019
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install PSYaml and Build HTML Files üîß
        run: |
          Install-Module -Name FXPSYaml -Force
          
          mkdir html | Out-Null
          
          foreach ($yamlfile in (Get-ChildItem *.yaml))
          {
              $yaml = ConvertFrom-Yaml -Path $yamlfile.FullName
              
              mkdir "html\$($yaml.technique)"
              
              $sb = [System.Text.StringBuilder]::new()
              [void]$sb.AppendLine('<html>')
              [void]$sb.AppendLine('    <head>')
              [void]$sb.AppendLine('        <style>')
              [void]$sb.AppendLine('            table {')
              [void]$sb.AppendLine('                width: 60%;')
              [void]$sb.AppendLine('                margin: 0 auto;')
              [void]$sb.AppendLine('                background-color: #000000;')
              [void]$sb.AppendLine('            }')
              [void]$sb.AppendLine('')
              [void]$sb.AppendLine('            th {')
              [void]$sb.AppendLine('                background-color: #DCDCDC;')
              [void]$sb.AppendLine('            }')
              [void]$sb.AppendLine('')
              [void]$sb.AppendLine('            table,')
              [void]$sb.AppendLine('            th,')
              [void]$sb.AppendLine('            td {')
              [void]$sb.AppendLine('                border: 3px solid black;')
              [void]$sb.AppendLine('                border-collapse: collapse;')
              [void]$sb.AppendLine('                font-weight: bold;')
              [void]$sb.AppendLine('            }')
              [void]$sb.AppendLine('')
              [void]$sb.AppendLine('            th,')
              [void]$sb.AppendLine('            td {')
              [void]$sb.AppendLine('                padding: 15px;')
              [void]$sb.AppendLine('                text-align: center;')
              [void]$sb.AppendLine('            }')
              [void]$sb.AppendLine('        </style>')
              [void]$sb.AppendLine('     </head>')
              [void]$sb.AppendLine('     <body>')
              [void]$sb.AppendLine('         <table>')
              [void]$sb.AppendLine('             <tr>')
              [void]$sb.AppendLine("                 <th colspan=`"$($yaml.header.colspan)`" id=`"th01`">$($yaml.header.name)</th>")
              [void]$sb.AppendLine('             </tr>')
              foreach($row in $yaml.rows)
              {
                  [void]$sb.AppendLine('            <tr>')
                  [void]$sb.AppendLine("                <td style=`"background-color: #FFFFFF`">$($row.name)</td>")
                  $red = [string]::Format("{0:X2}", $row.style.red)
                  $green = [string]::Format("{0:X2}", $row.style.green)
                  $blue = [string]::Format("{0:X2}", $row.style.blue)
                  $backgroundcolor = "$($red)$($green)$($blue)"
                  foreach($entry in $row.entries)
                  {
                      [void]$sb.AppendLine("                <td colspan=$($entry.attributes.colspan) style=`"background-color: #$($backgroundcolor)`">$($entry.name)</td>")
                  }
                  [void]$sb.AppendLine('            </tr>')
              }
              [void]$sb.AppendLine('        </table>')
              [void]$sb.AppendLine('    </body>')
              [void]$sb.AppendLine('</html>')
              $sb.ToString() | Out-File -FilePath ".\html\$($yaml.technique)\map.html"
              
              $sbmd = [System.Text.StringBuilder]::new()
              [void]$sbmd.AppendLine("+++")
              [void]$sbmd.AppendLine("title = `"$($yaml.title)`"")
              [void]$sbmd.AppendLine("menuTitle = `"$($yaml.title)`"")
              [void]$sbmd.AppendLine("chapter = false")
              [void]$sbmd.AppendLine("weight = $($yaml.technique.Split('T')[1])")
              [void]$sbmd.AppendLine("pre = `"<i class='fas fa-map'></i> `"")
              [void]$sbmd.AppendLine("+++")
              [void]$sbmd.AppendLine("")
              [void]$sbmd.AppendLine("MAP GOES HERE")
              $sbmd.ToString() | Out-File -FilePath ".\html\$($yaml.technique)\index.md"
          }
          
          $initialaccess = New-Object Collections.Generic.List[string]
          $execution = New-Object Collections.Generic.List[string]
          $persistence = New-Object Collections.Generic.List[string]
          $privilegeescalation = New-Object Collections.Generic.List[string]
          $defenseevasion = New-Object Collections.Generic.List[string]
          $credentialaccess = New-Object Collections.Generic.List[string]
          $discovery = New-Object Collections.Generic.List[string]
          $lateralmovement = New-Object Collections.Generic.List[string]
          $collection = New-Object Collections.Generic.List[string]
          $commandandcontrol = New-Object Collections.Generic.List[string]
          $exfiltration = New-Object Collections.Generic.List[string]
          $impact = New-Object Collections.Generic.List[string]

          foreach ($yamlfile in (Get-ChildItem *.yaml))
          {
              $yaml = ConvertFrom-Yaml -Path $yamlfile.FullName

              foreach($tactic in ($yaml.tactic))
              {
                  switch($tactic)
                  {
                      TA0001 {$initialaccess.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0002 {$execution.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0003 {$persistence.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0004 {$privilegeescalation.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0005 {$defenseevasion.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0006 {$credentialaccess.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0007 {$discovery.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0008 {$lateralmovement.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0009 {$collection.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0010 {$exfiltration.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0011 {$commandandcontrol.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      TA0040 {$impact.Add("[$($yaml.techniquename)](maps/$($yaml.technique.ToLower()))")}
                      default {}
                  }
              }
          }

          $length = 0
          if($initialaccess.Count -gt $length)
          {
              $length = $initialaccess.Count
          }
          if($execution.Count -gt $length)
          {
              $length = $execution.Count
          }
          if($persitence.Count -gt $length)
          {
              $length = $persistence.Count
          }
          if($privilegeescaltion.Count -gt $length)
          {
              $length = $privilegeescalation.Count
          }
          if($defenseevasion.Count -gt $length)
          {
              $length = $defenseevasion.Count
          }
          if($credentialaccess.Count -gt $length)
          {
              $length = $credentialaccess.Count
          }
          if($discovery.Count -gt $length)
          {
              $length = $discovery.Count
          }
          if($lateralmovement.Count -gt $length)
          {
              $length = $lateralmovement.Count
          }
          if($collection.Count -gt $length)
          {
              $length = $collection.Count
          }
          if($exfiltration.Count -gt $length)
          {
              $length = $exfiltration.Count
          }
          if($commandandcontrol.Count -gt $length)
          {
              $length = $commandandcontrol.Count
          }
          if($impact.Count -gt $length)
          {
              $length = $impact.Count
          }

          $sb = [System.Text.StringBuilder]::new()
          [void]$sb.AppendLine('![](/images/logo.png?pc=20)')
          [void]$sb.AppendLine('---')
          [void]$sb.AppendLine('## ATT&CK MATRIX')
          [void]$sb.AppendLine('')
          [void]$sb.AppendLine('| Initial Access | Execution | Persistence | Privilege Escalation | Defense Evasion | Credential Access | Discovery | Lateral Movement | Collection | Command and Control | Exfiltration | Impact |')
          [void]$sb.AppendLine('|----------------|-----------|-------------|----------------------|-----------------|-------------------|-----------|------------------|------------|---------------------|--------------|--------|')

          for($i=0; $i -lt $length; $i++)
          {
              $line = [System.Text.StringBuilder]::new()

              [void]$line.Append("|$($initialaccess[$($i)])|$($execution[$($i)])|$($persistence[$($i)])|$($privilegeescalation[$($i)])|$($defenseevasion[$($i)])|$($credentialaccess[$($i)])|$($discovery[$($i)])|$($lateralmovement[$($i)])|$($collection[$($i)])|$($commandandcontrol[$($i)])|$($exfiltration[$($i)])|$($impact[$($i)])")
              [void]$sb.AppendLine($line.ToString())
          }

          $sb.ToString() | Out-File -FilePath ".\html\_index.md"
          
          gci html -recurse
      - name: Upload Artifacts üî∫
        uses: actions/upload-artifact@v1
        with:
          name: html
          path: html
  buildsite:
    needs: [buildhtml]
    runs-on: windows-2019
    steps:
      - name: Download Artifacts üîª
        uses: actions/download-artifact@v1
        with:
          name: html
      - name: Checkout site branch üõéÔ∏è
        uses: actions/checkout@v2
        with:
          ref: site
          path: site
          persist-credentials: false
      - name: Add HTML Files to Site üîß
        run: |
          foreach($directory in (Get-ChildItem html -Directory))
          {
            Copy-Item $directory.FullName ".\site\content\maps\$($directory.Name)" -Recurse
          }
          
          Copy-Item .\html\_index.md .\site\content\_index.md
          
          Get-ChildItem .\site\content\maps -Recurse
      - name: Build with Hugo
        run: | 
          cd site
          .\bin\hugo\hugo_0.59.1_Windows-64bit\hugo.exe
          foreach($file in (Get-ChildItem ".\content\maps" -Recurse -Filter map.html))
          {
            $path = Split-Path -Path $file.FullName
            $content = Get-Content $file.FullName
            $newPath = $path + "\index.html"
            $newPath = $newPath -replace "content", "public"
            (Get-Content -Path $newPath -Raw) -replace 'MAP GOES HERE',$content | Out-File -FilePath $newPath
          }
          "abstractionmaps.com" | Out-File -FilePath ./public/CNAME
          ls
      - name: Upload Artifacts üî∫
        uses: actions/upload-artifact@v1
        with:
          name: site
          path: site/public
  deploy:
    needs: [buildsite]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Download Artifacts üîª
        uses: actions/download-artifact@v1
        with:
          name: site
      - name: Delete branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          branches: gh-pages
      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: "site"
